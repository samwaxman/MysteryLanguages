#lang racket
(provide #%module-begin #%datum #%top #%app)
;This is the only file not using the ML-Helpers setup. This is because
;it's the only for-all language where not all languages are parsed identically
;(because of numebermode)


(module reader racket
  (require (prefix-in ML1- "../ML-lib/Numbers/Numbers1.rkt")
           (prefix-in ML2- "../ML-lib/Numbers/Numbers2.rkt")
           (prefix-in ML3- "../ML-lib/Numbers/Numbers3.rkt")
           "../ML-lib/Parser/FullErrorParser.rkt"
           "../ML-lib/Parser/getInfo.rkt")
  (provide (rename-out [ML-read-syntax read-syntax]
                       [ML-read read])
           get-info)
  (define (ML-read-syntax _ in)  (let* ([in-str (port->string in)]
                                        [copy1 (open-input-string in-str)]
                                        [copy2 (open-input-string in-str)]
                                        [copy3 (open-input-string in-str)])
                                   
                                   (define parse1 (ML-parse (object-name in) copy1 'Num1 'lang1
                                                            #:+ #t #:- #t #:/ #t
                                                            #:let #t #:NumberMode ML1-NumberMode))
                                   (define parse2 (ML-parse (object-name in) copy2 'Num2 'lang2
                                                            #:+ #t #:- #t #:/ #t
                                                            #:let #t #:NumberMode ML2-NumberMode))
                                   (define parse3 (ML-parse (object-name in) copy2 'Num3 'lang3
                                                            #:+ #t #:- #t #:/ #t
                                                            #:let #t #:NumberMode ML3-NumberMode))
                                   (with-syntax ([p1 parse1] [p2 parse2] [p3 parse3])
          
                                     (let ([to-print 
                                            #`(module runAll racket p1 p2 p3
                                                (define prompt-tag (make-continuation-prompt-tag))
                                                (display "--------Core 1--------\n")
                                                (call-with-continuation-prompt (lambda ()
                                                                                 (call-with-exception-handler (lambda (x) (abort-current-continuation prompt-tag x)) (lambda () (dynamic-require '(submod 'runAll lang1) #f))))
                                                                                 prompt-tag (lambda (v) (display (string-append "ERROR:" (vector-ref (struct->vector v) 1) "\n"))))
                                                (display "--------Core 2--------\n")
                                                (call-with-continuation-prompt (lambda ()
                                                                                 (call-with-exception-handler (lambda (x) (abort-current-continuation prompt-tag x)) (lambda () (dynamic-require '(submod 'runAll lang2) #f))))
                                                                               prompt-tag (lambda (v) (display (string-append "ERROR:" (vector-ref (struct->vector v) 1) "\n")))))])
                                       (display "--------Core 3--------\n")
                                                (call-with-continuation-prompt (lambda ()
                                                                                 (call-with-exception-handler (lambda (x) (abort-current-continuation prompt-tag x)) (lambda () (dynamic-require '(submod 'runAll lang3) #f))))
                                                                               prompt-tag (lambda (v) (display (string-append "ERROR:" (vector-ref (struct->vector v) 1) "\n")))))])
                                       
                                       to-print))))
  (define (ML-read in) (syntax->datum (ML-read-syntax #f in))))
