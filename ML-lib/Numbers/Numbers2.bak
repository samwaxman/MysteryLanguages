#lang racket
(require syntax/parse
         racket/splicing
         (for-syntax syntax/parse
                     racket/base
                     racket/format)
         (except-in racket + - / * let)
         (rename-in racket [+ r+] [- r-] [* r*] [/ r/] [let r-let])
         "../ML-Helpers.rkt"
         "NumbersSetup.rkt"
         "../testPrinter.rkt")
(provide
 (rename-out [ML-let #%let] [ML+ #%+] [ML- #%-][ML* #%*] [ML/ #%/]
             ;Arity app is defined in ML-Helpers
             ;It display better arity error messages
             [#%arity-app #%app]
             [my-mod #%module-begin])
 #%datum
 #%top
 #%id
 #%block
 NumberMode
(all-from-out "../testPrinter.rkt"))

;THIS LANGUAGE'S READER READS IN ALL NUMS AS INEXACT
;This flag lets the reader know that
(define NumberMode 'inexact)

(define (divide a b)
  ;Numbers1 reads in numbers as exact.
  ;This means -0 turns into 0, so
  (if (= b -0) (r/ a 0.0)
      (r/ a b)))
(define (add a b)
  (r+ a b))
(define (subtract a b)
  (r- a b))
(define (multiply a b)
  (r* a b))


(define-syntax-rule (my-mod body ...)
  (#%module-begin
   (setup-printer)
   (add-setter add)
   (subtract-setter subtract)
   (multiply-setter multiply)
   (divide-setter divide)
   (let ()
     body ...)))
