#lang br
(require "GuilessBrIndent.rkt")

(define indent-width 2)
(define (left-bracket? c) (member c (list #\{ #\[)))
(define (right-bracket? c) (member c (list #\} #\])))
(define (allowed? prevAllowed char)
  (or (char-whitespace? char)
   (and (not (char-alphabetic? char))
      (and prevAllowed (or (char-numeric? char) (member char (list #\_ #\+ #\- #\* #\\)))))))
(define (contains-keyword-at-point? keyword-char-list char-list prevAllowed?)
  (let ([first (car char-list)])
    (and prevAllowed? (list-prefix? keyword-char-list char-list)
         (or (= (length keyword-char-list) (length char-list))
             (let ([next-char (list-ref  char-list (length keyword-char-list))])
               (not (or (char-alphabetic? next-char) (char-numeric? next-char)
                         (member char (list #\_ #\+ #\- #\* #\\)))))))))

(define indent-keywords (list "for" "if" "else" "fun" "lam" "block"))
(define unindent-keywords (list "else" "end"))


(define (determine-indent-from-previous previous-line)
  (define indent-to-add 0)
  (define (helper remaining-line prevAllowed?)
    (cond
      [(cons? remaining-line)
       (begin
       (for-each (lambda (x) (if (contains-keyword-at-point?
                                  (string->list x)
                                  remaining-line
                                  prevAllowed?)
                                 (set! indent-to-add (+ indent-to-add 2))
                                 (values)))
              indent-keywords)
       (helper (cdr remaining-line) (allowed? prevAllowed? (car remaining-line))))]
      [(null? remaining-line) indent-to-add]))
  (helper previous-line #t))

(define (determine-unindent-from-current current-line)
  (define indent-to-sub 0)
  (define (helper remaining-line prevAllowed?)
    (cond
      [(cons? remaining-line)
       (begin
       (for-each (lambda (x) (if (contains-keyword-at-point?
                                  (string->list x)
                                  remaining-line
                                  prevAllowed?)
                                 (set! indent-to-sub (- indent-to-sub 2))
                                 (values)))
              unindent-keywords)
       (helper (cdr remaining-line) (allowed? prevAllowed? (car remaining-line))))]
      [(null? remaining-line) indent-to-sub]))
  (helper current-line #t))

(define (indent-ML tbox [posn 0])
  (define prev-line (previous-line tbox posn))
  (define current-line (line tbox posn))
  (define prev-indent (or (line-indent tbox prev-line) 0))
  (define prev-line-chars (or (and prev-line (line-chars tbox prev-line)) '()))
  (define cur-line-chars (line-chars tbox current-line))
  (define indent-forward (determine-indent-from-previous prev-line-chars))
  (define indent-back (determine-unindent-from-current cur-line-chars))
  (define indent
    (+ prev-indent indent-forward indent-back))
  (and (exact-positive-integer? indent) indent))

(provide
 indent-ML)